; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210b-eval\dfu_mal.o --asm_dir=.\STM3210B-EVAL\ --list_dir=.\STM3210B-EVAL\ --depend=.\stm3210b-eval\dfu_mal.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210B_EVAL -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\CMSIS\Include -ID:\Keil5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD -DUSE_STM3210B_EVAL --omf_browse=.\stm3210b-eval\dfu_mal.crf ..\src\dfu_mal.c]
                          THUMB

                          AREA ||i.MAL_Erase||, CODE, READONLY, ALIGN=2

                  MAL_Erase PROC
;;;127    *******************************************************************************/
;;;128    uint16_t MAL_Erase(uint32_t SectorAddress)
000000  4906              LDR      r1,|L1.28|
;;;129    {
;;;130    
;;;131      switch (SectorAddress & MAL_MASK)
000002  f010427c          ANDS     r2,r0,#0xfc000000
000006  d006              BEQ      |L1.22|
000008  f1b26f00          CMP      r2,#0x8000000
00000c  d001              BEQ      |L1.18|
;;;132      {
;;;133        case INTERNAL_FLASH_BASE:
;;;134          pMAL_Erase = FLASH_If_Erase;
;;;135          break;
;;;136          
;;;137    #if defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)
;;;138        case SPI_FLASH_BASE:
;;;139          pMAL_Erase = SPI_If_Erase;
;;;140          break;
;;;141    #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;142                
;;;143    #ifdef USE_STM3210E_EVAL  
;;;144        case NOR_FLASH_BASE:
;;;145          pMAL_Erase = NOR_If_Erase;
;;;146          break;
;;;147    #endif /* USE_STM3210E_EVAL */
;;;148          
;;;149        default:
;;;150          return MAL_FAIL;
00000e  2001              MOVS     r0,#1
;;;151      }
;;;152      return pMAL_Erase(SectorAddress);
;;;153    }
000010  4770              BX       lr
                  |L1.18|
000012  4a03              LDR      r2,|L1.32|
000014  e000              B        |L1.24|
                  |L1.22|
000016  4a03              LDR      r2,|L1.36|
                  |L1.24|
000018  600a              STR      r2,[r1,#0]            ;152  ; pMAL_Erase
00001a  4710              BX       r2                    ;152
;;;154    
                          ENDP

                  |L1.28|
                          DCD      ||area_number.11||
                  |L1.32|
                          DCD      FLASH_If_Erase
                  |L1.36|
                          DCD      SPI_If_Erase

                          AREA ||i.MAL_GetStatus||, CODE, READONLY, ALIGN=2

                  MAL_GetStatus PROC
;;;228    *******************************************************************************/
;;;229    uint16_t MAL_GetStatus(uint32_t SectorAddress , uint8_t Cmd, uint8_t *buffer)
000000  f3c06381          UBFX     r3,r0,#26,#2
;;;230    {
;;;231      uint8_t x = (SectorAddress  >> 26) & 0x03 ; /* 0x000000000 --> 0 */
;;;232      /* 0x640000000 --> 1 */
;;;233      /* 0x080000000 --> 2 */
;;;234    
;;;235      uint8_t y = Cmd & 0x01;
000004  f0010001          AND      r0,r1,#1
;;;236    
;;;237    #if defined(USE_STM3210E_EVAL)  
;;;238      if ((x == 1) && (NOR_ID.Device_Code2 == NOR_M29W128G)&& (NOR_ID.Manufacturer_Code == 0x20))
;;;239      {
;;;240        x = 3 ;
;;;241      }
;;;242      else if((x == 1) && (NOR_ID.Device_Code2 == NOR_S29GL128) && (NOR_ID.Manufacturer_Code == 0x01))
;;;243      {
;;;244        x = 4 ;
;;;245      }  
;;;246    #endif /* USE_STM3210E_EVAL */
;;;247      
;;;248      SET_POLLING_TIMING(TimingTable[x][y]);  /* x: Erase/Write Timing */
000008  4906              LDR      r1,|L2.36|
00000a  eb010183          ADD      r1,r1,r3,LSL #2
00000e  f8113010          LDRB     r3,[r1,r0,LSL #1]
000012  7053              STRB     r3,[r2,#1]
000014  f8310010          LDRH     r0,[r1,r0,LSL #1]
000018  0a00              LSRS     r0,r0,#8
00001a  7090              STRB     r0,[r2,#2]
00001c  2000              MOVS     r0,#0
00001e  70d0              STRB     r0,[r2,#3]
;;;249      /* y: Media              */
;;;250      return MAL_OK;
;;;251    }
000020  4770              BX       lr
;;;252    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.constdata||

                          AREA ||i.MAL_Init||, CODE, READONLY, ALIGN=1

                  MAL_Init PROC
;;;89     *******************************************************************************/
;;;90     uint16_t MAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92     
;;;93       FLASH_If_Init(); /* Internal Flash */
000002  f7fffffe          BL       FLASH_If_Init
;;;94     
;;;95     #if defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)
;;;96       SPI_If_Init();   /* SPI Flash */
000006  f7fffffe          BL       SPI_If_Init
;;;97     #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;98     
;;;99     #ifdef USE_STM3210E_EVAL 
;;;100      NOR_If_Init();  /* NOR Flash */
;;;101      FSMC_NOR_ReadID(&NOR_ID);
;;;102        
;;;103      FSMC_NOR_ReturnToReadMode();
;;;104    
;;;105      /* select the alternate descriptor following NOR ID */
;;;106      if ((NOR_ID.Manufacturer_Code == 0x01)&&(NOR_ID.Device_Code2 == NOR_S29GL128))
;;;107      {
;;;108        DFU_String_Descriptor[6].Descriptor = DFU_StringInterface2_3;
;;;109      } 
;;;110      
;;;111      /* select the alternate descriptor following NOR ID */
;;;112      if  ((NOR_ID.Manufacturer_Code == 0x20)&&(NOR_ID.Device_Code2 == NOR_M29W128G))
;;;113      {
;;;114        DFU_String_Descriptor[6].Descriptor = DFU_StringInterface2_2;
;;;115      }
;;;116    #endif /* USE_STM3210E_EVAL */
;;;117    
;;;118      return MAL_OK;
00000a  2000              MOVS     r0,#0
;;;119    }
00000c  bd10              POP      {r4,pc}
;;;120    
                          ENDP


                          AREA ||i.MAL_Read||, CODE, READONLY, ALIGN=2

                  MAL_Read PROC
;;;194    *******************************************************************************/
;;;195    uint8_t *MAL_Read (uint32_t SectorAddress, uint32_t DataLength)
000000  4a06              LDR      r2,|L4.28|
;;;196    {
;;;197    
;;;198      switch (SectorAddress & MAL_MASK)
000002  f010437c          ANDS     r3,r0,#0xfc000000
000006  d006              BEQ      |L4.22|
000008  f1b36f00          CMP      r3,#0x8000000
00000c  d001              BEQ      |L4.18|
;;;199      {
;;;200        case INTERNAL_FLASH_BASE:
;;;201          pMAL_Read = FLASH_If_Read;
;;;202          break;
;;;203          
;;;204    #if defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)     
;;;205        case SPI_FLASH_BASE:
;;;206          pMAL_Read = SPI_If_Read;
;;;207          break;
;;;208    #endif /* USE_STM3210B_EVAL or USE_STM3210E_EVAL */
;;;209    
;;;210    #ifdef USE_STM3210E_EVAL
;;;211        case NOR_FLASH_BASE:
;;;212          pMAL_Read = NOR_If_Read;
;;;213          break;
;;;214    #endif /* USE_STM3210E_EVAL */
;;;215    
;;;216        default:
;;;217          return 0;
00000e  2000              MOVS     r0,#0
;;;218      }
;;;219      return pMAL_Read (SectorAddress, DataLength);
;;;220    }
000010  4770              BX       lr
                  |L4.18|
000012  4b03              LDR      r3,|L4.32|
000014  e000              B        |L4.24|
                  |L4.22|
000016  4b03              LDR      r3,|L4.36|
                  |L4.24|
000018  6093              STR      r3,[r2,#8]            ;219  ; pMAL_Read
00001a  4718              BX       r3                    ;219
;;;221    
                          ENDP

                  |L4.28|
                          DCD      ||area_number.11||
                  |L4.32|
                          DCD      FLASH_If_Read
                  |L4.36|
                          DCD      SPI_If_Read

                          AREA ||i.MAL_Write||, CODE, READONLY, ALIGN=2

                  MAL_Write PROC
;;;161    *******************************************************************************/
;;;162    uint16_t MAL_Write (uint32_t SectorAddress, uint32_t DataLength)
000000  4a06              LDR      r2,|L5.28|
;;;163    {
;;;164    
;;;165      switch (SectorAddress & MAL_MASK)
000002  f010437c          ANDS     r3,r0,#0xfc000000
000006  d006              BEQ      |L5.22|
000008  f1b36f00          CMP      r3,#0x8000000
00000c  d001              BEQ      |L5.18|
;;;166      {
;;;167        case INTERNAL_FLASH_BASE:
;;;168          pMAL_Write = FLASH_If_Write;
;;;169          break;
;;;170    
;;;171    #if defined(USE_STM3210B_EVAL) || defined(USE_STM3210E_EVAL)    
;;;172        case SPI_FLASH_BASE:
;;;173          pMAL_Write = SPI_If_Write;
;;;174          break;
;;;175    #endif /* USE_STM3210B_EVAL || USE_STM3210E_EVAL */      
;;;176    
;;;177    #ifdef USE_STM3210E_EVAL
;;;178        case NOR_FLASH_BASE:
;;;179          pMAL_Write = NOR_If_Write;
;;;180          break;
;;;181    #endif /* USE_STM3210E_EVAL */
;;;182        default:
;;;183          return MAL_FAIL;
00000e  2001              MOVS     r0,#1
;;;184      }
;;;185      return pMAL_Write(SectorAddress, DataLength);
;;;186    }
000010  4770              BX       lr
                  |L5.18|
000012  4b03              LDR      r3,|L5.32|
000014  e000              B        |L5.24|
                  |L5.22|
000016  4b03              LDR      r3,|L5.36|
                  |L5.24|
000018  6053              STR      r3,[r2,#4]            ;185  ; pMAL_Write
00001a  4718              BX       r3                    ;185
;;;187    
                          ENDP

                  |L5.28|
                          DCD      ||area_number.11||
                  |L5.32|
                          DCD      FLASH_If_Write
                  |L5.36|
                          DCD      SPI_If_Write

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  MAL_Buffer
                          %        1024

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  TimingTable
000000  0bb80014          DCW      0x0bb8,0x0014
000004  03e80019          DCW      0x03e8,0x0019
000008  00320032          DCW      0x0032,0x0032
00000c  03e80019          DCW      0x03e8,0x0019
000010  03e8002d          DCW      0x03e8,0x002d

                          AREA ||.data||, DATA, ALIGN=2

                  pMAL_Init
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  pMAL_Erase
                          DCD      0x00000000
                  pMAL_Write
                          DCD      0x00000000
                  pMAL_Read
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.data||
                  NOR_ID
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\src\\dfu_mal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REV16|
#line 129 "D:\\Keil5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_dfu_mal_c_MAL_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_dfu_mal_c_MAL_Init____REVSH|
#line 144
|__asm___9_dfu_mal_c_MAL_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
