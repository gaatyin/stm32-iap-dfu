; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm3210e-eval\stm32f10x_bkp.o --asm_dir=.\STM3210E-EVAL\ --list_dir=.\STM3210E-EVAL\ --depend=.\stm3210e-eval\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM3210E_EVAL -ID:\Keil5\ARM\RV31\INC -ID:\Keil5\ARM\CMSIS\Include -ID:\Keil5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=526 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DUSE_STM3210E_EVAL --omf_browse=.\stm3210e-eval\stm32f10x_bkp.crf ..\..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;274      */
;;;275    void BKP_ClearFlag(void)
000000  4802              LDR      r0,|L1.12|
;;;276    {
;;;277      /* Set CTE bit to clear Tamper Pin Event flag */
;;;278      BKP->CSR |= BKP_CSR_CTE;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  8001              STRH     r1,[r0,#0]
;;;279    }
00000a  4770              BX       lr
;;;280    
                          ENDP

                  |L1.12|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;295      */
;;;296    void BKP_ClearITPendingBit(void)
000000  4802              LDR      r0,|L2.12|
;;;297    {
;;;298      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;299      BKP->CSR |= BKP_CSR_CTI;
000002  8801              LDRH     r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  8001              STRH     r1,[r0,#0]
;;;300    }
00000a  4770              BX       lr
;;;301    
                          ENDP

                  |L2.12|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;125      */
;;;126    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;129      RCC_BackupResetCmd(DISABLE);
000008  e8bd4010          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7ffbffe          B.W      RCC_BackupResetCmd
;;;130    }
;;;131    
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;264      */
;;;265    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;266    {
;;;267      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;268    }
000006  4770              BX       lr
;;;269    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;285      */
;;;286    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;287    {
;;;288      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;289    }
000006  4770              BX       lr
;;;290    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;165      */
;;;166    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;167    {
;;;168      /* Check the parameters */
;;;169      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;170      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;171    }
000004  4770              BX       lr
;;;172    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;185      */
;;;186    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000000  4a03              LDR      r2,|L7.16|
;;;187    {
;;;188      uint16_t tmpreg = 0;
;;;189      /* Check the parameters */
;;;190      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;191      tmpreg = BKP->RTCCR;
000002  8811              LDRH     r1,[r2,#0]
;;;192      /* Clear CCO, ASOE and ASOS bits */
;;;193      tmpreg &= RTCCR_MASK;
000004  f4217160          BIC      r1,r1,#0x380
;;;194      
;;;195      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;196      tmpreg |= BKP_RTCOutputSource;
000008  4301              ORRS     r1,r1,r0
;;;197      /* Store the new value */
;;;198      BKP->RTCCR = tmpreg;
00000a  8011              STRH     r1,[r2,#0]
;;;199    }
00000c  4770              BX       lr
;;;200    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;246      */
;;;247    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000000  b508              PUSH     {r3,lr}
;;;248    {
;;;249      __IO uint32_t tmp = 0;
;;;250    
;;;251      /* Check the parameters */
;;;252      assert_param(IS_BKP_DR(BKP_DR));
;;;253    
;;;254      tmp = (uint32_t)BKP_BASE; 
000002  4902              LDR      r1,|L8.12|
;;;255      tmp += BKP_DR;
000004  4408              ADD      r0,r0,r1
;;;256    
;;;257      return (*(__IO uint16_t *) tmp);
000006  9000              STR      r0,[sp,#0]
000008  8800              LDRH     r0,[r0,#0]
;;;258    }
00000a  bd08              POP      {r3,pc}
;;;259    
                          ENDP

                  |L8.12|
                          DCD      0x40006c00

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;206      */
;;;207    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000000  4a03              LDR      r2,|L9.16|
;;;208    {
;;;209      uint16_t tmpreg = 0;
;;;210      /* Check the parameters */
;;;211      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;212      tmpreg = BKP->RTCCR;
000002  8811              LDRH     r1,[r2,#0]
;;;213      /* Clear CAL[6:0] bits */
;;;214      tmpreg &= RTCCR_CAL_MASK;
000004  f021017f          BIC      r1,r1,#0x7f
;;;215      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;216      tmpreg |= CalibrationValue;
000008  4301              ORRS     r1,r1,r0
;;;217      /* Store the new value */
;;;218      BKP->RTCCR = tmpreg;
00000a  8011              STRH     r1,[r2,#0]
;;;219    }
00000c  4770              BX       lr
;;;220    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;152      */
;;;153    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;154    {
;;;155      /* Check the parameters */
;;;156      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;157      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;158    }
000004  4770              BX       lr
;;;159    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;139      */
;;;140    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;141    {
;;;142      /* Check the parameters */
;;;143      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;144      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;145    }
000004  4770              BX       lr
;;;146    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;227      */
;;;228    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000000  b508              PUSH     {r3,lr}
;;;229    {
;;;230      __IO uint32_t tmp = 0;
;;;231    
;;;232      /* Check the parameters */
;;;233      assert_param(IS_BKP_DR(BKP_DR));
;;;234    
;;;235      tmp = (uint32_t)BKP_BASE; 
000002  4a02              LDR      r2,|L12.12|
;;;236      tmp += BKP_DR;
000004  4410              ADD      r0,r0,r2
;;;237    
;;;238      *(__IO uint32_t *) tmp = Data;
000006  9000              STR      r0,[sp,#0]
000008  6001              STR      r1,[r0,#0]
;;;239    }
00000a  bd08              POP      {r3,pc}
;;;240    
                          ENDP

                  |L12.12|
                          DCD      0x40006c00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_bkp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_bkp_c_27a06cb8____REV16|
#line 129 "D:\\Keil5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_bkp_c_27a06cb8____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_bkp_c_27a06cb8____REVSH|
#line 144
|__asm___15_stm32f10x_bkp_c_27a06cb8____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
